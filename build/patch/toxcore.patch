diff -ru c-toxcore-0.1.10/toxcore/DHT.c c-toxcore-0.1.10.patch/toxcore/DHT.c
--- c-toxcore-0.1.10/toxcore/DHT.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/DHT.c	2018-03-16 15:50:06.000000000 +0800
@@ -1211,7 +1211,7 @@
     }
 
     uint8_t plain[CRYPTO_PUBLIC_KEY_SIZE + sizeof(ping_id)];
-    uint8_t data[1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + sizeof(plain) + CRYPTO_MAC_SIZE];
+    ELASTOS_VLA(uint8_t, data, 1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + sizeof(plain) + CRYPTO_MAC_SIZE);
 
     memcpy(plain, client_id, CRYPTO_PUBLIC_KEY_SIZE);
     memcpy(plain + CRYPTO_PUBLIC_KEY_SIZE, &ping_id, sizeof(ping_id));
@@ -1222,7 +1222,7 @@
     int len = DHT_create_packet(dht->self_public_key, shared_key, NET_PACKET_GET_NODES,
                                 plain, sizeof(plain), data);
 
-    if (len != sizeof(data)) {
+    if (len != ELASTOS_SIZEOF_VLA(data)) {
         return -1;
     }
 
@@ -1263,12 +1263,12 @@
     memcpy(plain + 1 + nodes_length, sendback_data, length);
 
     const uint32_t crypto_size = 1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_MAC_SIZE;
-    VLA(uint8_t, data, 1 + nodes_length + length + crypto_size);
+    ELASTOS_VLA(uint8_t, data, 1 + nodes_length + length + crypto_size);
 
     int len = DHT_create_packet(dht->self_public_key, shared_encryption_key, NET_PACKET_SEND_NODES_IPV6,
                                 plain, 1 + nodes_length + length, data);
 
-    if (len != SIZEOF_VLA(data)) {
+    if (len != ELASTOS_SIZEOF_VLA(data)) {
         return -1;
     }
 
@@ -1950,7 +1950,7 @@
 static int send_NATping(DHT *dht, const uint8_t *public_key, uint64_t ping_id, uint8_t type)
 {
     uint8_t data[sizeof(uint64_t) + 1];
-    uint8_t packet[MAX_CRYPTO_REQUEST_SIZE];
+    ELASTOS_VLA(uint8_t, packet, MAX_CRYPTO_REQUEST_SIZE);
 
     int num = 0;
 
@@ -2182,7 +2182,7 @@
         return -1;
     }
 
-    uint8_t packet[MAX_CRYPTO_REQUEST_SIZE];
+    ELASTOS_VLA(uint8_t, packet, MAX_CRYPTO_REQUEST_SIZE);
     uint8_t data[HARDREQ_DATA_SIZE] = {0};
     data[0] = type;
     memcpy(data + 1, contents, length);
@@ -2214,7 +2214,7 @@
         return -1;
     }
 
-    uint8_t packet[MAX_CRYPTO_REQUEST_SIZE];
+    ELASTOS_VLA(uint8_t, packet, MAX_CRYPTO_REQUEST_SIZE);
     VLA(uint8_t, data, 1 + CRYPTO_PUBLIC_KEY_SIZE + nodes_data_length);
     data[0] = CHECK_TYPE_GETNODE_RES;
     memcpy(data + 1, queried_client_id, CRYPTO_PUBLIC_KEY_SIZE);
diff -ru c-toxcore-0.1.10/toxcore/LAN_discovery.c c-toxcore-0.1.10.patch/toxcore/LAN_discovery.c
--- c-toxcore-0.1.10/toxcore/LAN_discovery.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/LAN_discovery.c	2018-03-16 15:50:06.000000000 +0800
@@ -364,7 +364,7 @@
 
 int send_LANdiscovery(uint16_t port, DHT *dht)
 {
-    uint8_t data[CRYPTO_PUBLIC_KEY_SIZE + 1];
+    ELASTOS_VLA(uint8_t, data, CRYPTO_PUBLIC_KEY_SIZE + 1);
     data[0] = NET_PACKET_LAN_DISCOVERY;
     id_copy(data + 1, dht->self_public_key);
 
diff -ru c-toxcore-0.1.10/toxcore/Messenger.c c-toxcore-0.1.10.patch/toxcore/Messenger.c
--- c-toxcore-0.1.10/toxcore/Messenger.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/Messenger.c	2018-03-16 15:50:06.000000000 +0800
@@ -3154,3 +3154,14 @@
 
     return ret;
 }
+
+#if defined(ELASTOS_BUILD)
+int messenger_get_random_tcp_relay_addr(const Messenger *m, IP_Port *ip_port, uint8_t *public_key)
+{
+    if (!m || !ip_port)
+        return -1;
+
+    return crypto_get_random_tcp_relay_addr(m->net_crypto, ip_port, public_key);
+}
+#endif
+
diff -ru c-toxcore-0.1.10/toxcore/Messenger.h c-toxcore-0.1.10.patch/toxcore/Messenger.h
--- c-toxcore-0.1.10/toxcore/Messenger.h	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/Messenger.h	2018-03-16 15:50:06.000000000 +0800
@@ -774,4 +774,8 @@
  * of out_list will be truncated to list_size. */
 uint32_t copy_friendlist(const Messenger *m, uint32_t *out_list, uint32_t list_size);
 
+#if defined(ELASTOS_BUILD)
+int messenger_get_random_tcp_relay_addr(const Messenger *m, IP_Port *ip_port, uint8_t *public_key);
+#endif
+
 #endif
diff -ru c-toxcore-0.1.10/toxcore/TCP_client.c c-toxcore-0.1.10.patch/toxcore/TCP_client.c
--- c-toxcore-0.1.10/toxcore/TCP_client.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/TCP_client.c	2018-03-16 15:50:06.000000000 +0800
@@ -27,6 +27,10 @@
 
 #include "TCP_client.h"
 
+#if defined(ELASTOS_BUILD)
+#include "network.h"
+#endif
+
 #include "util.h"
 
 #if !defined(_WIN32) && !defined(__WIN32__) && !defined (WIN32)
@@ -365,18 +369,19 @@
         }
     }
 
-    VLA(uint8_t, packet, sizeof(uint16_t) + length + CRYPTO_MAC_SIZE);
+    ELASTOS_VLA(uint8_t, packet, sizeof(uint16_t) + length + CRYPTO_MAC_SIZE);
 
     uint16_t c_length = net_htons(length + CRYPTO_MAC_SIZE);
     memcpy(packet, &c_length, sizeof(uint16_t));
     int len = encrypt_data_symmetric(con->shared_key, con->sent_nonce, data, length, packet + sizeof(uint16_t));
 
-    if ((unsigned int)len != (SIZEOF_VLA(packet) - sizeof(uint16_t))) {
+    if ((unsigned int)len != (ELASTOS_SIZEOF_VLA(packet) - sizeof(uint16_t))) {
         return -1;
     }
 
+    ela_magic_set(packet);
     if (priority) {
-        len = sendpriority ? send(con->sock, (const char *)packet, SIZEOF_VLA(packet), MSG_NOSIGNAL) : 0;
+        len = sendpriority ? send(con->sock, (const char *)ela_rewind(packet), ela_rewind_sizeof(packet), MSG_NOSIGNAL) : 0;
 
         if (len <= 0) {
             len = 0;
@@ -384,14 +389,14 @@
 
         increment_nonce(con->sent_nonce);
 
-        if ((unsigned int)len == SIZEOF_VLA(packet)) {
+        if ((unsigned int)len == ela_rewind_sizeof(packet)) {
             return 1;
         }
 
-        return client_add_priority(con, packet, SIZEOF_VLA(packet), len);
+        return client_add_priority(con, ela_rewind(packet), ela_rewind_sizeof(packet), len);
     }
 
-    len = send(con->sock, (const char *)packet, SIZEOF_VLA(packet), MSG_NOSIGNAL);
+    len = send(con->sock, (const char *)ela_rewind(packet), ela_rewind_sizeof(packet), MSG_NOSIGNAL);
 
     if (len <= 0) {
         return 0;
@@ -399,12 +404,12 @@
 
     increment_nonce(con->sent_nonce);
 
-    if ((unsigned int)len == SIZEOF_VLA(packet)) {
+    if ((unsigned int)len == ela_rewind_sizeof(packet)) {
         return 1;
     }
 
-    memcpy(con->last_packet, packet, SIZEOF_VLA(packet));
-    con->last_packet_length = SIZEOF_VLA(packet);
+    memcpy(con->last_packet, ela_rewind(packet), ela_rewind_sizeof(packet));
+    con->last_packet_length = ela_rewind_sizeof(packet);
     con->last_packet_sent = len;
     return 1;
 }
diff -ru c-toxcore-0.1.10/toxcore/TCP_connection.c c-toxcore-0.1.10.patch/toxcore/TCP_connection.c
--- c-toxcore-0.1.10/toxcore/TCP_connection.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/TCP_connection.c	2018-03-16 15:50:06.000000000 +0800
@@ -1489,3 +1489,58 @@
     free(tcp_c->connections);
     free(tcp_c);
 }
+
+#if defined(ELASTOS_BUILD)
+int get_random_tcp_relay_addr(TCP_Connections *tcp_c, IP_Port *ip_port, uint8_t *public_key)
+{
+    int i, r = rand();
+    int nconnections = 0;
+    int nsleeps = 0;
+    int index;
+
+    if (!tcp_c || !ip_port)
+        return -1;
+
+    for (i = 0; i < tcp_c->tcp_connections_length; i++) {
+        if (tcp_c->tcp_connections[i].status == TCP_CONN_CONNECTED)
+            ++nconnections;
+        else if (tcp_c->tcp_connections[i].status == TCP_CONN_SLEEPING)
+            ++nsleeps;
+    }
+
+    if (nconnections == 0 && nsleeps == 0)
+        return -2;
+
+    if (nconnections > 0) {
+        index = (tcp_c->tcp_connections_length + r) % nconnections;
+
+        for (i = 0; i < tcp_c->tcp_connections_length; i++) {
+            if (tcp_c->tcp_connections[i].status == TCP_CONN_CONNECTED) {
+                if (index == 0) {
+                    memcpy(public_key, tcp_c->tcp_connections[i].connection->public_key, CRYPTO_PUBLIC_KEY_SIZE);
+                    *ip_port = tcp_c->tcp_connections[i].connection->ip_port;
+                    return 0;
+                }
+                --index;
+            }
+        }
+    }
+
+    if (nsleeps > 0) {
+        index = (tcp_c->tcp_connections_length + r) % nsleeps;
+        for (i = 0; i < tcp_c->tcp_connections_length; i++) {
+            if (tcp_c->tcp_connections[i].status == TCP_CONN_SLEEPING) {
+                if (index == 0) {
+                    memcpy(public_key, tcp_c->tcp_connections[i].relay_pk, CRYPTO_PUBLIC_KEY_SIZE);
+                    *ip_port = tcp_c->tcp_connections[i].ip_port;
+                    return 0;
+                }
+                --index;
+            }
+        }
+    }
+
+    return -3;
+}
+#endif
+
diff -ru c-toxcore-0.1.10/toxcore/TCP_connection.h c-toxcore-0.1.10.patch/toxcore/TCP_connection.h
--- c-toxcore-0.1.10/toxcore/TCP_connection.h	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/TCP_connection.h	2018-03-16 15:50:06.000000000 +0800
@@ -219,5 +219,9 @@
 void do_tcp_connections(TCP_Connections *tcp_c, void *userdata);
 void kill_tcp_connections(TCP_Connections *tcp_c);
 
+#if defined(ELASTOS_BUILD)
+int get_random_tcp_relay_addr(TCP_Connections *tcp_c, IP_Port *ip_port, uint8_t *public_key);
+#endif
+
 #endif
 
diff -ru c-toxcore-0.1.10/toxcore/TCP_server.c c-toxcore-0.1.10.patch/toxcore/TCP_server.c
--- c-toxcore-0.1.10/toxcore/TCP_server.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/TCP_server.c	2018-03-16 15:51:18.000000000 +0800
@@ -27,6 +27,13 @@
 
 #include "TCP_server.h"
 
+#if defined(ELASTOS_BUILD)
+#include "network.h"
+#if defined(__ANDROID__)
+#define fprintf(...)
+#endif
+#endif
+
 #include "util.h"
 
 #if !defined(_WIN32) && !defined(__WIN32__) && !defined (WIN32)
@@ -229,7 +236,21 @@
 {
     unsigned int count = TCP_socket_data_recv_buffer(sock);
 
-    if (count >= sizeof(uint16_t)) {
+    if (count >= sizeof(uint16_t) + ela_magic_size()) {
+#if defined(ELASTOS_BUILD)
+		uint8_t magic[ela_magic_size()];
+		int mlen = recv(sock, (char *)magic, ela_magic_size(), MSG_NOSIGNAL);
+		
+		if (mlen != ela_magic_size()) {
+			fprintf(stderr, "FAIL recv magic length\n");
+			return 0;
+		}
+		
+		if (!ela_magic_check_unrewind(magic)) {
+			fprintf(stderr, "FAIL invalid magic\n");
+			return 0;
+		}
+#endif
         uint16_t length;
         int len = recv(sock, (char *)&length, sizeof(uint16_t), MSG_NOSIGNAL);
 
@@ -431,18 +452,19 @@
         }
     }
 
-    VLA(uint8_t, packet, sizeof(uint16_t) + length + CRYPTO_MAC_SIZE);
+    ELASTOS_VLA(uint8_t, packet, sizeof(uint16_t) + length + CRYPTO_MAC_SIZE);
 
     uint16_t c_length = net_htons(length + CRYPTO_MAC_SIZE);
     memcpy(packet, &c_length, sizeof(uint16_t));
     int len = encrypt_data_symmetric(con->shared_key, con->sent_nonce, data, length, packet + sizeof(uint16_t));
 
-    if ((unsigned int)len != (SIZEOF_VLA(packet) - sizeof(uint16_t))) {
+    if ((unsigned int)len != (ELASTOS_SIZEOF_VLA(packet) - sizeof(uint16_t))) {
         return -1;
     }
 
+    ela_magic_set(packet);
     if (priority) {
-        len = sendpriority ? send(con->sock, (const char *)packet, SIZEOF_VLA(packet), MSG_NOSIGNAL) : 0;
+        len = sendpriority ? send(con->sock, (const char *)ela_rewind(packet), ela_rewind_sizeof(packet), MSG_NOSIGNAL) : 0;
 
         if (len <= 0) {
             len = 0;
@@ -450,14 +472,14 @@
 
         increment_nonce(con->sent_nonce);
 
-        if ((unsigned int)len == SIZEOF_VLA(packet)) {
+        if ((unsigned int)len == ela_rewind_sizeof(packet)) {
             return 1;
         }
 
-        return add_priority(con, packet, SIZEOF_VLA(packet), len);
+        return add_priority(con, packet, ela_rewind_sizeof(packet), len);
     }
 
-    len = send(con->sock, (const char *)packet, SIZEOF_VLA(packet), MSG_NOSIGNAL);
+    len = send(con->sock, (const char *)ela_rewind(packet), ela_rewind_sizeof(packet), MSG_NOSIGNAL);
 
     if (len <= 0) {
         return 0;
@@ -465,12 +487,12 @@
 
     increment_nonce(con->sent_nonce);
 
-    if ((unsigned int)len == SIZEOF_VLA(packet)) {
+    if ((unsigned int)len == ela_rewind_sizeof(packet)) {
         return 1;
     }
 
-    memcpy(con->last_packet, packet, SIZEOF_VLA(packet));
-    con->last_packet_length = SIZEOF_VLA(packet);
+    memcpy(con->last_packet, ela_rewind(packet), ela_rewind_sizeof(packet));
+    con->last_packet_length = ela_rewind_sizeof(packet);
     con->last_packet_sent = len;
     return 1;
 }
diff -ru c-toxcore-0.1.10/toxcore/net_crypto.c c-toxcore-0.1.10.patch/toxcore/net_crypto.c
--- c-toxcore-0.1.10/toxcore/net_crypto.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/net_crypto.c	2018-03-16 15:50:06.000000000 +0800
@@ -216,13 +216,13 @@
         return 1;
     }
 
-    uint8_t data[COOKIE_RESPONSE_LENGTH];
+    ELASTOS_VLA(uint8_t, data, COOKIE_RESPONSE_LENGTH);
 
-    if (create_cookie_response(c, data, request_plain, shared_key, dht_public_key) != sizeof(data)) {
+    if (create_cookie_response(c, data, request_plain, shared_key, dht_public_key) != ELASTOS_SIZEOF_VLA(data)) {
         return 1;
     }
 
-    if ((uint32_t)sendpacket(c->dht->net, source, data, sizeof(data)) != sizeof(data)) {
+    if ((uint32_t)sendpacket(c->dht->net, source, data, ELASTOS_SIZEOF_VLA(data)) != ELASTOS_SIZEOF_VLA(data)) {
         return 1;
     }
 
@@ -903,12 +903,12 @@
     }
 
     pthread_mutex_lock(&conn->mutex);
-    VLA(uint8_t, packet, 1 + sizeof(uint16_t) + length + CRYPTO_MAC_SIZE);
+    ELASTOS_VLA(uint8_t, packet, 1 + sizeof(uint16_t) + length + CRYPTO_MAC_SIZE);
     packet[0] = NET_PACKET_CRYPTO_DATA;
     memcpy(packet + 1, conn->sent_nonce + (CRYPTO_NONCE_SIZE - sizeof(uint16_t)), sizeof(uint16_t));
     int len = encrypt_data_symmetric(conn->shared_key, conn->sent_nonce, data, length, packet + 1 + sizeof(uint16_t));
 
-    if (len + 1 + sizeof(uint16_t) != SIZEOF_VLA(packet)) {
+    if (len + 1 + sizeof(uint16_t) != ELASTOS_SIZEOF_VLA(packet)) {
         pthread_mutex_unlock(&conn->mutex);
         return -1;
     }
@@ -916,7 +916,7 @@
     increment_nonce(conn->sent_nonce);
     pthread_mutex_unlock(&conn->mutex);
 
-    return send_packet_to(c, crypt_connection_id, packet, SIZEOF_VLA(packet));
+    return send_packet_to(c, crypt_connection_id, packet, ELASTOS_SIZEOF_VLA(packet));
 }
 
 /* Creates and sends a data packet with buffer_start and num to the peer using the fastest route.
@@ -1233,6 +1233,12 @@
 static int send_temp_packet(Net_Crypto *c, int crypt_connection_id)
 {
     Crypto_Connection *conn = get_crypto_connection(c, crypt_connection_id);
+#if defined(ELASTOS_BUILD)
+    ELASTOS_VLA(uint8_t, packet, conn->temp_packet_length);
+    memcpy(packet, conn->temp_packet, conn->temp_packet_length);
+#else
+    uint8_t *packet = conn->temp_packet;
+#endif
 
     if (conn == 0) {
         return -1;
@@ -1242,7 +1248,7 @@
         return -1;
     }
 
-    if (send_packet_to(c, crypt_connection_id, conn->temp_packet, conn->temp_packet_length) != 0) {
+    if (send_packet_to(c, crypt_connection_id, packet, conn->temp_packet_length) != 0) {
         return -1;
     }
 
@@ -2906,3 +2912,14 @@
     crypto_memzero(c, sizeof(Net_Crypto));
     free(c);
 }
+
+#if defined(ELASTOS_BUILD)
+int crypto_get_random_tcp_relay_addr(Net_Crypto *c, IP_Port *ip_port, uint8_t *public_key)
+{
+    if (!c || !ip_port)
+        return -1;
+
+    return get_random_tcp_relay_addr(c->tcp_c, ip_port, public_key);
+}
+#endif
+
diff -ru c-toxcore-0.1.10/toxcore/net_crypto.h c-toxcore-0.1.10.patch/toxcore/net_crypto.h
--- c-toxcore-0.1.10/toxcore/net_crypto.h	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/net_crypto.h	2018-03-16 15:50:06.000000000 +0800
@@ -423,6 +423,8 @@
 
 void kill_net_crypto(Net_Crypto *c);
 
-
+#if defined(ELASTOS_BUILD)
+int crypto_get_random_tcp_relay_addr(Net_Crypto *c, IP_Port *ip_Port, uint8_t *public_key);
+#endif
 
 #endif
diff -ru c-toxcore-0.1.10/toxcore/network.c c-toxcore-0.1.10.patch/toxcore/network.c
--- c-toxcore-0.1.10/toxcore/network.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/network.c	2018-03-16 15:50:06.000000000 +0800
@@ -419,11 +419,12 @@
         return -1;
     }
 
-    int res = sendto(net->sock, (const char *) data, length, 0, (struct sockaddr *)&addr, addrsize);
+    ela_magic_set(data);
+    int res = sendto(net->sock, (const char *)ela_rewind(data), ela_rewind_size(length), 0, (struct sockaddr *)&addr, addrsize);
 
     loglogdata(net->log, "O=>", data, length, ip_port, res);
 
-    return res;
+    return res > 0 ? (res - ela_magic_size()) : res;
 }
 
 /* Function to receive data
@@ -441,7 +442,7 @@
     socklen_t addrlen = sizeof(addr);
 #endif
     *length = 0;
-    int fail_or_len = recvfrom(sock, (char *) data, MAX_UDP_PACKET_SIZE, 0, (struct sockaddr *)&addr, &addrlen);
+    int fail_or_len = recvfrom(sock, (char *) ela_rewind(data), ela_rewind_size(MAX_UDP_PACKET_SIZE), 0, (struct sockaddr *)&addr, &addrlen);
 
     if (fail_or_len < 0) {
 
@@ -451,6 +452,19 @@
 
         return -1; /* Nothing received. */
     }
+#if defined(ELASTOS_BUILD)
+	fail_or_len -= ela_magic_size();
+	if (fail_or_len < 0) {
+		LOGGER_ERROR(log, "Too short data receving from socket.");
+		return -1;
+	}
+	if (!ela_magic_check(data)) {
+		//LOGGER_ERROR(log, "Received DHT message with invalid magic, dropped.");
+		return -1;
+	} else {
+		//LOGGER_DEBUG(log, "Recevied valid DHT message, congradulations!!!!");
+	}
+#endif
 
     *length = (uint32_t)fail_or_len;
 
@@ -485,6 +499,91 @@
     net->packethandlers[byte].object = object;
 }
 
+#if defined(ELASTOS_BUILD)
+static const char* packet_name(uint8_t type)
+{
+    const char *str;
+
+    switch (type) {
+    case NET_PACKET_PING_REQUEST:
+        str = "ping_request";
+        break;
+    case NET_PACKET_PING_RESPONSE:
+        str = "ping_response";
+        break;
+    case NET_PACKET_GET_NODES:
+        str = "get_nodes";
+        break;
+    case NET_PACKET_SEND_NODES_IPV6:
+        str = "send_nodes_ipv6";
+        break;
+    case NET_PACKET_COOKIE_REQUEST:
+        str = "cookie_request";
+        break;
+    case NET_PACKET_COOKIE_RESPONSE:
+        str = "cookie_response";
+        break;
+    case NET_PACKET_CRYPTO_HS:
+        str = "crypto_hs";
+        break;
+    case NET_PACKET_CRYPTO_DATA:
+        str = "crypto_data";
+        break;
+    case NET_PACKET_CRYPTO:
+        str = "crypto";
+        break;
+    case NET_PACKET_LAN_DISCOVERY:
+        str = "lan_discovery";
+        break;
+    case  NET_PACKET_ONION_SEND_INITIAL:
+        str = "onion_send_init";
+        break;
+    case  NET_PACKET_ONION_SEND_1:
+        str = "onion_send_1";
+        break;
+    case NET_PACKET_ONION_SEND_2:
+        str = "onion_send_2";
+        break;
+    case NET_PACKET_ANNOUNCE_REQUEST:
+        str = "announce_request";
+        break;
+    case NET_PACKET_ANNOUNCE_RESPONSE:
+        str = "announce_response";
+        break;
+    case NET_PACKET_ONION_DATA_REQUEST:
+        str = "onion_data_request";
+        break;
+    case NET_PACKET_ONION_DATA_RESPONSE:
+        str = "onion_data_response";
+        break;
+    case NET_PACKET_ONION_RECV_3:
+        str = "onion_recv_3";
+        break;
+    case NET_PACKET_ONION_RECV_2:
+        str = "onion_recv_2";
+        break;
+    case NET_PACKET_ONION_RECV_1:
+        str = "onion_recv_1";
+        break;
+    case BOOTSTRAP_INFO_PACKET_ID:
+        str = "bootstrap_info_packet_id";
+        break;
+    default:
+        str = "N/A";
+        break;
+    }
+    return str;
+}
+#else
+static const char* packet_name(uint8_t type)
+{
+    static uint8_t str[32];
+
+    sprintf(str, "[%0x]", type);
+    return str;
+}
+#endif
+
 void networking_poll(Networking_Core *net, void *userdata)
 {
     if (net->family == 0) { /* Socket not initialized */
@@ -494,7 +593,7 @@
     unix_time_update();
 
     IP_Port ip_port;
-    uint8_t data[MAX_UDP_PACKET_SIZE];
+    ELASTOS_VLA(uint8_t, data, MAX_UDP_PACKET_SIZE);
     uint32_t length;
 
     while (receivepacket(net->log, net->sock, &ip_port, data, &length) != -1) {
@@ -506,6 +605,8 @@
             LOGGER_WARNING(net->log, "[%02u] -- Packet has no handler", data[0]);
             continue;
         }
+		
+        LOGGER_TRACE(net->log, "received packet [0x%x](%s)", data[0], packet_name(data[0]));
 
         net->packethandlers[data[0]].function(net->packethandlers[data[0]].object, ip_port, data, length, userdata);
     }
diff -ru c-toxcore-0.1.10/toxcore/network.h c-toxcore-0.1.10.patch/toxcore/network.h
--- c-toxcore-0.1.10/toxcore/network.h	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/network.h	2018-03-16 15:50:06.000000000 +0800
@@ -39,6 +39,80 @@
 #include <string.h>
 #include <time.h>
 
+#if defined(ELASTOS_BUILD)
+#include <alloca.h>
+#include <arpa/inet.h>
+
+static const uint32_t _w_magic = 0x69766567; //'ELAC';
+
+static inline
+size_t ela_magic_size(void)
+{
+    return sizeof(_w_magic);
+}
+static inline
+void ela_magic_set(const uint8_t *addr)
+{
+    uint8_t *const rewind = (uint8_t *)addr - ela_magic_size();
+    *(uint32_t *)rewind = htonl(_w_magic);
+}
+static inline
+int ela_magic_check(const uint8_t *addr)
+{
+    uint8_t *const rewind = (uint8_t *)addr - ela_magic_size();
+    return ntohl(*(uint32_t *)rewind) == _w_magic;
+}
+static inline
+int ela_magic_check_unrewind(const uint8_t *addr)
+{
+    return ntohl(*(uint32_t *)addr) == _w_magic;
+}
+static inline
+const uint8_t *ela_rewind(const uint8_t *addr)
+{
+    return addr - ela_magic_size();
+}
+static inline
+size_t ela_rewind_size(size_t len)
+{
+    return len + ela_magic_size();
+}
+
+#define ela_rewind_sizeof(p)  ela_rewind_size(ELASTOS_SIZEOF_VLA(p))
+
+#define ELASTOS_VLA(type, name, size)                                   \
+    const size_t name##_size = (size) * sizeof(type) + ela_magic_size(); \
+    type *const name##_i = (type *)alloca(name##_size); \
+    type *const name = (type *)((uint8_t *)name##_i + ela_magic_size())
+#define ELASTOS_SIZEOF_VLA(name)        (name##_size - ela_magic_size())
+#else
+static inline
+size_t ela_magic_size(void)
+{
+	return 0;
+}	
+static inline
+void ela_magic_set(const uint8_t *addr)
+{
+    (void)addr;
+}
+static inline
+const uint8_t *ela_rewind(const uint8_t *addr)
+{
+    return addr;
+}
+static inline
+size_t ela_rewind_size(size_t len)
+{
+    return len;
+}
+
+#define ela_rewind_sizeof(p) SIZEOF_VLA(p)
+
+#define ELASTOS_VLA(type, name, size) VLA(type, name, size)
+#define ELASTOS_SIZEOF_VLA(name)  SIZEOF_VLA(name)
+#endif
+
 #if defined(_WIN32) || defined(__WIN32__) || defined (WIN32) /* Put win32 includes here */
 #ifndef WINVER
 //Windows XP
diff -ru c-toxcore-0.1.10/toxcore/onion.c c-toxcore-0.1.10.patch/toxcore/onion.c
--- c-toxcore-0.1.10/toxcore/onion.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/onion.c	2018-03-16 15:50:06.000000000 +0800
@@ -287,8 +287,8 @@
  */
 int send_onion_packet(Networking_Core *net, const Onion_Path *path, IP_Port dest, const uint8_t *data, uint16_t length)
 {
-    uint8_t packet[ONION_MAX_PACKET_SIZE];
-    int len = create_onion_packet(packet, sizeof(packet), path, dest, data, length);
+    ELASTOS_VLA(uint8_t, packet, ONION_MAX_PACKET_SIZE);
+    int len = create_onion_packet(packet, ELASTOS_SIZEOF_VLA(packet), path, dest, data, length);
 
     if (len == -1) {
         return -1;
@@ -313,12 +313,12 @@
         return -1;
     }
 
-    VLA(uint8_t, packet, 1 + RETURN_3 + length);
+    ELASTOS_VLA(uint8_t, packet, 1 + RETURN_3 + length);
     packet[0] = NET_PACKET_ONION_RECV_3;
     memcpy(packet + 1, ret, RETURN_3);
     memcpy(packet + 1 + RETURN_3, data, length);
 
-    if ((uint32_t)sendpacket(net, dest, packet, SIZEOF_VLA(packet)) != SIZEOF_VLA(packet)) {
+    if ((uint32_t)sendpacket(net, dest, packet, ELASTOS_SIZEOF_VLA(packet)) != ELASTOS_SIZEOF_VLA(packet)) {
         return -1;
     }
 
@@ -371,7 +371,7 @@
     uint8_t ip_port[SIZE_IPPORT];
     ipport_pack(ip_port, &source);
 
-    uint8_t data[ONION_MAX_PACKET_SIZE];
+    ELASTOS_VLA(uint8_t, data, ONION_MAX_PACKET_SIZE);
     data[0] = NET_PACKET_ONION_SEND_1;
     memcpy(data + 1, nonce, CRYPTO_NONCE_SIZE);
     memcpy(data + 1 + CRYPTO_NONCE_SIZE, plain + SIZE_IPPORT, len - SIZE_IPPORT);
@@ -424,7 +424,7 @@
         return 1;
     }
 
-    uint8_t data[ONION_MAX_PACKET_SIZE];
+    ELASTOS_VLA(uint8_t, data, ONION_MAX_PACKET_SIZE);
     data[0] = NET_PACKET_ONION_SEND_2;
     memcpy(data + 1, packet + 1, CRYPTO_NONCE_SIZE);
     memcpy(data + 1 + CRYPTO_NONCE_SIZE, plain + SIZE_IPPORT, len - SIZE_IPPORT);
@@ -480,7 +480,7 @@
         return 1;
     }
 
-    uint8_t data[ONION_MAX_PACKET_SIZE];
+    ELASTOS_VLA(uint8_t, data, ONION_MAX_PACKET_SIZE);
     memcpy(data, plain + SIZE_IPPORT, len - SIZE_IPPORT);
     uint16_t data_len = (len - SIZE_IPPORT);
     uint8_t *ret_part = data + (len - SIZE_IPPORT);
@@ -533,7 +533,7 @@
         return 1;
     }
 
-    uint8_t data[ONION_MAX_PACKET_SIZE];
+    ELASTOS_VLA(uint8_t, data, ONION_MAX_PACKET_SIZE);
     data[0] = NET_PACKET_ONION_RECV_2;
     memcpy(data + 1, plain + SIZE_IPPORT, RETURN_2);
     memcpy(data + 1 + RETURN_2, packet + 1 + RETURN_3, length - (1 + RETURN_3));
@@ -574,7 +574,7 @@
         return 1;
     }
 
-    uint8_t data[ONION_MAX_PACKET_SIZE];
+    ELASTOS_VLA(uint8_t, data, ONION_MAX_PACKET_SIZE);
     data[0] = NET_PACKET_ONION_RECV_1;
     memcpy(data + 1, plain + SIZE_IPPORT, RETURN_1);
     memcpy(data + 1 + RETURN_1, packet + 1 + RETURN_2, length - (1 + RETURN_2));
diff -ru c-toxcore-0.1.10/toxcore/onion_announce.c c-toxcore-0.1.10.patch/toxcore/onion_announce.c
--- c-toxcore-0.1.10/toxcore/onion_announce.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/onion_announce.c	2018-03-16 15:50:06.000000000 +0800
@@ -149,8 +149,8 @@
         return -1;
     }
 
-    uint8_t packet[ONION_MAX_PACKET_SIZE];
-    len = create_onion_packet(packet, sizeof(packet), path, dest.ip_port, request, sizeof(request));
+    ELASTOS_VLA(uint8_t, packet, ONION_MAX_PACKET_SIZE);
+    len = create_onion_packet(packet, ELASTOS_SIZEOF_VLA(packet), path, dest.ip_port, request, sizeof(request));
 
     if (len == -1) {
         return -1;
@@ -187,8 +187,8 @@
         return -1;
     }
 
-    uint8_t packet[ONION_MAX_PACKET_SIZE];
-    len = create_onion_packet(packet, sizeof(packet), path, dest, request, len);
+    ELASTOS_VLA(uint8_t, packet, ONION_MAX_PACKET_SIZE);
+    len = create_onion_packet(packet, ELASTOS_SIZEOF_VLA(packet), path, dest, request, len);
 
     if (len == -1) {
         return -1;
diff -ru c-toxcore-0.1.10/toxcore/onion_client.c c-toxcore-0.1.10.patch/toxcore/onion_client.c
--- c-toxcore-0.1.10/toxcore/onion_client.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/onion_client.c	2018-03-16 15:50:06.000000000 +0800
@@ -346,8 +346,8 @@
                                      const uint8_t *data, uint16_t length)
 {
     if (path->ip_port1.ip.family == AF_INET || path->ip_port1.ip.family == AF_INET6) {
-        uint8_t packet[ONION_MAX_PACKET_SIZE];
-        int len = create_onion_packet(packet, sizeof(packet), path, dest, data, length);
+        ELASTOS_VLA(uint8_t, packet, ONION_MAX_PACKET_SIZE);
+        int len = create_onion_packet(packet, ELASTOS_SIZEOF_VLA(packet), path, dest, data, length);
 
         if (len == -1) {
             return -1;
@@ -1010,7 +1010,7 @@
         return -1;
     }
 
-    uint8_t packet[MAX_CRYPTO_REQUEST_SIZE];
+    ELASTOS_VLA(uint8_t, packet, MAX_CRYPTO_REQUEST_SIZE);
     len = create_request(onion_c->dht->self_public_key, onion_c->dht->self_secret_key, packet,
                          onion_c->friends_list[friend_num].dht_public_key, temp, SIZEOF_VLA(temp), CRYPTO_PACKET_DHTPK);
 
diff -ru c-toxcore-0.1.10/toxcore/ping.c c-toxcore-0.1.10.patch/toxcore/ping.c
--- c-toxcore-0.1.10/toxcore/ping.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/ping.c	2018-03-16 15:50:06.000000000 +0800
@@ -60,7 +60,7 @@
 
 int send_ping_request(PING *ping, IP_Port ipp, const uint8_t *public_key)
 {
-    uint8_t   pk[DHT_PING_SIZE];
+    ELASTOS_VLA(uint8_t, pk, DHT_PING_SIZE);
     int       rc;
     uint64_t  ping_id;
 
@@ -100,13 +100,13 @@
         return 1;
     }
 
-    return sendpacket(ping->dht->net, ipp, pk, sizeof(pk));
+    return sendpacket(ping->dht->net, ipp, pk, ELASTOS_SIZEOF_VLA(pk));
 }
 
 static int send_ping_response(PING *ping, IP_Port ipp, const uint8_t *public_key, uint64_t ping_id,
                               uint8_t *shared_encryption_key)
 {
-    uint8_t   pk[DHT_PING_SIZE];
+    ELASTOS_VLA(uint8_t, pk, DHT_PING_SIZE);
     int       rc;
 
     if (id_equal(public_key, ping->dht->self_public_key)) {
@@ -131,7 +131,7 @@
         return 1;
     }
 
-    return sendpacket(ping->dht->net, ipp, pk, sizeof(pk));
+    return sendpacket(ping->dht->net, ipp, pk, ELASTOS_SIZEOF_VLA(pk));
 }
 
 static int handle_ping_request(void *object, IP_Port source, const uint8_t *packet, uint16_t length, void *userdata)
diff -ru c-toxcore-0.1.10/toxcore/tox.c c-toxcore-0.1.10.patch/toxcore/tox.c
--- c-toxcore-0.1.10/toxcore/tox.c	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/tox.c	2018-03-16 15:50:06.000000000 +0800
@@ -1549,3 +1549,23 @@
     SET_ERROR_PARAMETER(error, TOX_ERR_GET_PORT_NOT_BOUND);
     return 0;
 }
+
+#if defined(ELASTOS_BUILD)
+int tox_self_get_random_tcp_relay(const Tox *tox, uint8_t *ip, uint8_t *public_key)
+{
+    const Messenger *m = tox;
+    IP_Port ip_port;
+    int rc;
+
+    if (!ip)
+        return -1;
+
+    rc = messenger_get_random_tcp_relay_addr(m, &ip_port, public_key);
+    if (rc < 0)
+        return rc;
+
+    memcpy(ip, &ip_port.ip.ip4, sizeof(uint32_t));
+    return 0;
+}
+#endif
+
diff -ru c-toxcore-0.1.10/toxcore/tox.h c-toxcore-0.1.10.patch/toxcore/tox.h
--- c-toxcore-0.1.10/toxcore/tox.h	2017-08-06 18:22:48.000000000 +0800
+++ c-toxcore-0.1.10.patch/toxcore/tox.h	2018-03-16 15:50:06.000000000 +0800
@@ -2940,6 +2940,18 @@
  */
 uint16_t tox_self_get_tcp_port(const Tox *tox, TOX_ERR_GET_PORT *error);
 
+#if defined(ELASTOS_BUILD)
+/* Return a random TCP relay address for use as address of turn server.
+ *
+ * As to be sure, application need to call this function more than or
+ * at least 5 times on failure.
+ *
+ * return 0 on success with valid ip address pointed by 'ip';
+ * return -1 on failure.
+ */
+int tox_self_get_random_tcp_relay(const Tox *tox, uint8_t *ip, uint8_t *public_key);
+#endif
+
 #ifdef __cplusplus
 }
 #endif
